#include <omp.h>
#include <stdio.h>

int main() {
    long long int n = 100000,i;
    double array[n];
    double sum_parallel = 0.0;
    double start_time, end_time;
    double first_parallel_time;

    for ( i = 0; i < n; i++) {
        array[i] = 1.0;
    }

    for (int num_threads = 2; num_threads <= 8; num_threads *= 2) {
        sum_parallel = 0.0;
        omp_set_num_threads(num_threads);

        start_time = omp_get_wtime();
        #pragma omp parallel for reduction(+:sum_parallel)
        for (i = 0; i < n; i++) {
            sum_parallel += array[i];
        }
        end_time = omp_get_wtime();
        double parallel_time = end_time - start_time;

        if (num_threads == 2) {
            first_parallel_time = parallel_time;
        }

        double speedup = first_parallel_time / parallel_time;
        double efficiency = speedup / num_threads;

        printf("Parallel Sum with %d threads: %f\n", num_threads, sum_parallel);
        printf("Parallel Execution Time with %d threads: %f seconds\n", num_threads, parallel_time);
        printf("Speedup with %d threads (relative to 2 threads): %f\n", num_threads, speedup);
        printf("Efficiency with %d threads: %f\n\n", num_threads, efficiency);
    }

    return 0;
}
